// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "news api": Application Contexts
//
// Command:
// $ goagen
// --design=news-api/design
// --out=$(GOPATH)/src/news-api
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// ArticleArticlesContext provides the articles article action context.
type ArticleArticlesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewArticleArticlesContext parses the incoming request URL and body, performs validations and creates the
// context used by the articles controller article action.
func NewArticleArticlesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ArticleArticlesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ArticleArticlesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ArticleArticlesContext) OK(r *GoaNewsAPIArticle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.news.api.article+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ArticleArticlesContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ArticleArticlesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ArticlesArticlesContext provides the articles articles action context.
type ArticlesArticlesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewArticlesArticlesContext parses the incoming request URL and body, performs validations and creates the
// context used by the articles controller articles action.
func NewArticlesArticlesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ArticlesArticlesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ArticlesArticlesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ArticlesArticlesContext) OK(r *GoaNewsAPIArticles) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.news.api.articles+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ArticlesArticlesContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
