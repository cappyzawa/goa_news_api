// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "news api": Models
//
// Command:
// $ goagen
// --design=news-api/design
// --out=$(GOPATH)/src/news-api
// --version=v1.2.0-dirty

package models

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// articles テーブル
type Article struct {
	ID             int `gorm:"primary_key"` // primary key
	CategoryID     string
	Clicks         int
	Created        string
	Description    string
	HeadLine       string
	MediaID        string
	NewsLink       string
	QstyCategoryID string
	ThumbURL       string
	Updated        string
	VespaIndex     string
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Article) TableName() string {
	return "articles"

}

// ArticleDB is the implementation of the storage interface for
// Article.
type ArticleDB struct {
	Db *gorm.DB
}

// NewArticleDB creates a new storage type.
func NewArticleDB(db *gorm.DB) *ArticleDB {
	return &ArticleDB{Db: db}
}

// DB returns the underlying database.
func (m *ArticleDB) DB() interface{} {
	return m.Db
}

// ArticleStorage represents the storage interface.
type ArticleStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Article, error)
	Get(ctx context.Context, id int) (*Article, error)
	Add(ctx context.Context, article *Article) error
	Update(ctx context.Context, article *Article) error
	Delete(ctx context.Context, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *ArticleDB) TableName() string {
	return "articles"

}

// CRUD Functions

// Get returns a single Article as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *ArticleDB) Get(ctx context.Context, id int) (*Article, error) {
	defer goa.MeasureSince([]string{"goa", "db", "article", "get"}, time.Now())

	var native Article
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Article
func (m *ArticleDB) List(ctx context.Context) ([]*Article, error) {
	defer goa.MeasureSince([]string{"goa", "db", "article", "list"}, time.Now())

	var objs []*Article
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ArticleDB) Add(ctx context.Context, model *Article) error {
	defer goa.MeasureSince([]string{"goa", "db", "article", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Article", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ArticleDB) Update(ctx context.Context, model *Article) error {
	defer goa.MeasureSince([]string{"goa", "db", "article", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Article", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ArticleDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "article", "delete"}, time.Now())

	var obj Article

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Article", "error", err.Error())
		return err
	}

	return nil
}
