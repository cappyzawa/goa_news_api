// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "news api": articles Resource Client
//
// Command:
// $ goagen
// --design=news-api/design
// --out=$(GOPATH)/src/news-api
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ArticleArticlesPath computes a request path to the article action of articles.
func ArticleArticlesPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/articles/%s", param0)
}

// 記事の詳細
func (c *Client) ArticleArticles(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewArticleArticlesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewArticleArticlesRequest create the request corresponding to the article action endpoint of the articles resource.
func (c *Client) NewArticleArticlesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ArticlesArticlesPath computes a request path to the articles action of articles.
func ArticlesArticlesPath() string {

	return fmt.Sprintf("/api/v1/articles/")
}

// 記事の一覧
func (c *Client) ArticlesArticles(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewArticlesArticlesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewArticlesArticlesRequest create the request corresponding to the articles action endpoint of the articles resource.
func (c *Client) NewArticlesArticlesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
